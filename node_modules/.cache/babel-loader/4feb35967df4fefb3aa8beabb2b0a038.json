{"ast":null,"code":"import React, { createElement } from 'react';\nimport { useLocation, withRouter, matchPath } from 'react-router';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n/**\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * This script exports a HOC that accepts a routes array of objects\r\n * and an options object.\r\n *\r\n * API:\r\n *\r\n * withBreadcrumbs(\r\n *   routes?: Array<Route>,\r\n *   options? Object<Options>,\r\n * ): HigherOrderComponent\r\n *\r\n * More Info:\r\n *\r\n * https://github.com/icd2k3/react-router-breadcrumbs-hoc\r\n *\r\n */\n\n\nvar DEFAULT_MATCH_OPTIONS = {\n  exact: true\n};\nvar NO_BREADCRUMB = 'NO_BREADCRUMB';\n/**\r\n * This method was \"borrowed\" from https://stackoverflow.com/a/28339742\r\n * we used to use the humanize-string package, but it added a lot of bundle\r\n * size and issues with compilation. This 4-liner seems to cover most cases.\r\n */\n\nvar humanize = function humanize(str) {\n  return str.replace(/^[\\s_]+|[\\s_]+$/g, '').replace(/[_\\s]+/g, ' ').replace(/^[a-z]/, function (m) {\n    return m.toUpperCase();\n  });\n};\n/**\r\n * Renders and returns the breadcrumb complete\r\n * with `match`, `location`, and `key` props.\r\n */\n\n\nvar render = function render(_a) {\n  var Breadcrumb = _a.breadcrumb,\n      match = _a.match,\n      location = _a.location,\n      rest = __rest(_a, [\"breadcrumb\", \"match\", \"location\"]);\n\n  var componentProps = __assign({\n    match: match,\n    location: location,\n    key: match.url\n  }, rest);\n\n  return __assign(__assign({}, componentProps), {\n    breadcrumb: typeof Breadcrumb === 'string' ? /*#__PURE__*/createElement('span', {\n      key: componentProps.key\n    }, Breadcrumb) : /*#__PURE__*/React.createElement(Breadcrumb, __assign({}, componentProps))\n  });\n};\n/**\r\n * Small helper method to get a default breadcrumb if the user hasn't provided one.\r\n*/\n\n\nvar getDefaultBreadcrumb = function getDefaultBreadcrumb(_a) {\n  var currentSection = _a.currentSection,\n      location = _a.location,\n      pathSection = _a.pathSection;\n  var match = matchPath(pathSection, __assign(__assign({}, DEFAULT_MATCH_OPTIONS), {\n    path: pathSection\n  }))\n  /* istanbul ignore next: this is hard to mock in jest :( */\n  || {\n    url: 'not-found'\n  };\n  return render({\n    breadcrumb: humanize(currentSection),\n    match: match,\n    location: location\n  });\n};\n/**\r\n * Loops through the route array (if provided) and returns either a\r\n * user-provided breadcrumb OR a sensible default (if enabled)\r\n*/\n\n\nvar getBreadcrumbMatch = function getBreadcrumbMatch(_a) {\n  var currentSection = _a.currentSection,\n      disableDefaults = _a.disableDefaults,\n      excludePaths = _a.excludePaths,\n      location = _a.location,\n      pathSection = _a.pathSection,\n      routes = _a.routes;\n  var breadcrumb; // Check the optional `excludePaths` option in `options` to see if the\n  // current path should not include a breadcrumb.\n\n  var getIsPathExcluded = function getIsPathExcluded(path) {\n    return matchPath(pathSection, {\n      path: path,\n      exact: true,\n      strict: false\n    });\n  };\n\n  if (excludePaths && excludePaths.some(getIsPathExcluded)) {\n    return NO_BREADCRUMB;\n  } // Loop through the route array and see if the user has provided a custom breadcrumb.\n\n\n  routes.some(function (_a) {\n    var userProvidedBreadcrumb = _a.breadcrumb,\n        matchOptions = _a.matchOptions,\n        path = _a.path,\n        rest = __rest(_a, [\"breadcrumb\", \"matchOptions\", \"path\"]);\n\n    if (!path) {\n      throw new Error('withBreadcrumbs: `path` must be provided in every route object');\n    }\n\n    var match = matchPath(pathSection, __assign(__assign({}, matchOptions || DEFAULT_MATCH_OPTIONS), {\n      path: path\n    })); // If user passed breadcrumb: null OR custom match options to suppress a breadcrumb\n    // we need to know NOT to add it to the matches array\n    // see: `if (breadcrumb !== NO_BREADCRUMB)` below.\n\n    if (match && userProvidedBreadcrumb === null || !match && matchOptions) {\n      breadcrumb = NO_BREADCRUMB;\n      return true;\n    }\n\n    if (match) {\n      // This covers the case where a user may be extending their react-router route\n      // config with breadcrumbs, but also does not want default breadcrumbs to be\n      // automatically generated (opt-in).\n      if (!userProvidedBreadcrumb && disableDefaults) {\n        breadcrumb = NO_BREADCRUMB;\n        return true;\n      }\n\n      breadcrumb = render(__assign({\n        // Although we have a match, the user may be passing their react-router config object\n        // which we support. The route config object may not have a `breadcrumb` param specified.\n        // If this is the case, we should provide a default via `humanize`.\n        breadcrumb: userProvidedBreadcrumb || humanize(currentSection),\n        match: match,\n        location: location\n      }, rest));\n      return true;\n    }\n\n    return false;\n  }); // User provided a breadcrumb prop, or we generated one above.\n\n  if (breadcrumb) {\n    return breadcrumb;\n  } // If there was no breadcrumb provided and user has disableDefaults turned on.\n\n\n  if (disableDefaults) {\n    return NO_BREADCRUMB;\n  } // If the above conditionals don't fire, generate a default breadcrumb based on the path.\n\n\n  return getDefaultBreadcrumb({\n    pathSection: pathSection,\n    // include a \"Home\" breadcrumb by default (can be overrode or disabled in config).\n    currentSection: pathSection === '/' ? 'Home' : currentSection,\n    location: location\n  });\n};\n/**\r\n * Splits the pathname into sections, then search for matches in the routes\r\n * a user-provided breadcrumb OR a sensible default.\r\n*/\n\n\nvar getBreadcrumbs = function getBreadcrumbs(_a) {\n  var routes = _a.routes,\n      location = _a.location,\n      _b = _a.options,\n      options = _b === void 0 ? {} : _b;\n  var matches = [];\n  var pathname = location.pathname;\n  pathname.split('?')[0] // Split pathname into sections.\n  .split('/') // Reduce over the sections and call `getBreadcrumbMatch()` for each section.\n  .reduce(function (previousSection, currentSection, index) {\n    // Combine the last route section with the currentSection.\n    // For example, `pathname = /1/2/3` results in match checks for\n    // `/1`, `/1/2`, `/1/2/3`.\n    var pathSection = !currentSection ? '/' : previousSection + \"/\" + currentSection; // Ignore trailing slash or double slashes in the URL\n\n    if (pathSection === '/' && index !== 0) {\n      return '';\n    }\n\n    var breadcrumb = getBreadcrumbMatch(__assign({\n      currentSection: currentSection,\n      location: location,\n      pathSection: pathSection,\n      routes: routes\n    }, options)); // Add the breadcrumb to the matches array\n    // unless the user has explicitly passed.\n    // { path: x, breadcrumb: null } to disable.\n\n    if (breadcrumb !== NO_BREADCRUMB) {\n      matches.push(breadcrumb);\n    }\n\n    return pathSection === '/' ? '' : pathSection;\n  }, '');\n  return matches;\n};\n/**\r\n * Takes a route array and recursively flattens it IF there are\r\n * nested routes in the config.\r\n*/\n\n\nvar flattenRoutes = function flattenRoutes(routes) {\n  return routes.reduce(function (arr, route) {\n    if (route.routes) {\n      return arr.concat(__spreadArrays([route], flattenRoutes(route.routes)));\n    }\n\n    return arr.concat(route);\n  }, []);\n};\n/**\r\n * This is the main default HOC wrapper component. There is some\r\n * logic in here for legacy react-router v4 support\r\n */\n\n\nvar index = function (routes, options) {\n  return function (Component) {\n    var sharedBreadcrumbProps = {\n      options: options,\n      routes: flattenRoutes(routes || [])\n    }; // use the location hook if available (5.x)\n\n    /* istanbul ignore else */\n\n    if (useLocation) {\n      return function (props) {\n        return /*#__PURE__*/React.createElement(Component, __assign(__assign({}, props), {\n          breadcrumbs: getBreadcrumbs(__assign(__assign({}, sharedBreadcrumbProps), {\n            location: useLocation()\n          }))\n        }));\n      };\n    } // fallback to withRouter for older react-router versions (4.x)\n\n    /* istanbul ignore next */\n\n\n    return withRouter(function (props) {\n      // eslint-disable-next-line no-console\n      console.warn('[react-router-breadcrumbs-hoc]: react-router v4 support will be deprecated in the next major release. Please consider upgrading react-router and react-router-dom to >= 5.1.0');\n      return /*#__PURE__*/createElement(Component, __assign(__assign({}, props), {\n        breadcrumbs: getBreadcrumbs(__assign(__assign({}, sharedBreadcrumbProps), {\n          location: props.location\n        }))\n      }));\n    });\n  };\n};\n\nexport default index;\nexport { getBreadcrumbs };","map":null,"metadata":{},"sourceType":"module"}